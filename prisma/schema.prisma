// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Department {
  id             String @id @default(uuid())
  code           String @unique // "KIDS", "MENS", "WOMENS"
  name           String
  description    String?
  subDepartments SubDepartment[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("departments")
}

model SubDepartment {
  id           String @id @default(uuid())
  code         String  // "IB", "IG", "KB_L", "KB_SETS", etc.
  name         String
  description  String?
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  categories   Category[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([departmentId, code])
  @@map("sub_departments")
}

model Category {
  id              String @id @default(uuid())
  code            String  // "IB_BERMUDA", "M_JEANS", etc.
  displayName     String
  description     String?
  
  subDepartmentId String?
  subDepartment   SubDepartment? @relation(fields: [subDepartmentId], references: [id], onDelete: Cascade)
  
  // Dynamic attribute configuration
  attributeConfigs CategoryAttributeConfig[]
  extractions     Extraction[]
  
  isActive        Boolean @default(true)
  sortOrder       Int     @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([subDepartmentId, code])
  @@map("categories")
}

// Master attribute definitions (your 50+ attributes)
model MasterAttribute {
  id              String @id @default(uuid())
  key             String @unique  // "additional_accessories", "belt_design"
  label           String  // "ADDITIONAL ACCESSORIES", "BELT DESIGN"
  type            AttributeType
  description     String?
  
  // Your allowedValues structure: [{shortForm, fullForm}, ...]
  allowedValues   Json?   // Stores your shortForm/fullForm options
  
  // AI Configuration
  aiExtractable   Boolean @default(true)
  aiWeight        Float   @default(1.0)
  aiPromptHint    String?
  
  // Category configurations
  categoryConfigs CategoryAttributeConfig[]
  
  sortOrder       Int     @default(0)
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("master_attributes")
}

// Your true/false mapping system
model CategoryAttributeConfig {
  id           String @id @default(uuid())
  
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  attributeId  String
  attribute    MasterAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  
  // Your true/false system
  isEnabled    Boolean @default(false)  // Your true/false values
  isRequired   Boolean @default(false)
  
  // Category-specific overrides
  customOptions Json?
  customLabel   String?
  
  sortOrder     Int @default(0)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([categoryId, attributeId])
  @@map("category_attribute_configs")
}

enum AttributeType {
  TEXT
  SELECT
  MULTI_SELECT
  BOOLEAN
  NUMBER
  DATE
}

// Extraction model for AI processing
model Extraction {
  id              String @id @default(uuid())
  imageUrl        String
  imageMetadata   Json?
  
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  
  // Your extracted attribute values
  extractedData   Json    // Stores actual values for enabled attributes
  rawAIResponse   Json?   // Raw AI response
  confidence      Float   @default(0)
  
  // AI processing info
  aiModel         String?
  promptVersion   String?
  processingTime  Int?
  tokenUsage      Int?
  cost            Float?
  
  status          ExtractionStatus @default(PROCESSING)
  errorMessage    String?
  sessionId       String?
  cacheKey        String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation: events referencing this extraction (zero or one typical, but allow many for future reprocess attempts)
  events          ExtractionEvent[]
  
  @@map("extractions")
}

// Fine-grained event log for each API extraction request (successful or failed)
model ExtractionEvent {
  id              String   @id @default(uuid())
  extractionId    String?  // links to persisted Extraction when available
  extraction      Extraction? @relation(fields: [extractionId], references: [id], onDelete: SetNull)

  categoryCode    String
  status          ExtractionStatus
  fromCache       Boolean  @default(false)
  processingTime  Int?     // ms
  tokensUsed      Int?     // unified token metric
  costUsd         Float?   // optional cost estimate
  errorCode       String?
  errorMessage    String?
  aiModel         String?

  createdAt       DateTime @default(now())

  @@index([categoryCode, createdAt])
  @@index([status, createdAt])
  @@index([createdAt])
  @@map("extraction_events")
}

// Pre-aggregated daily statistics (optional optimization for dashboards)
model DailyStat {
  id              String  @id @default(uuid())
  date            DateTime // normalized to UTC midnight
  categoryCode    String?
  total           Int      @default(0)
  completed       Int      @default(0)
  failed          Int      @default(0)
  cached          Int      @default(0)
  avgProcessingMs Float?   @default(0)
  avgTokens       Float?   @default(0)
  totalTokens     Int      @default(0)
  totalCostUsd    Float?   @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([date, categoryCode])
  @@index([date])
  @@map("daily_stats")
}

enum ExtractionStatus {
  PROCESSING
  COMPLETED
  FAILED
  CACHED
}

// Store completed extraction results for UI display
model ExtractionResult {
  id              String @id @default(uuid())
  fileName        String
  originalFileName String?
  status          String @default("completed")
  categoryId      String
  categoryName    String?
  
  // Extracted attributes as JSON
  attributes      Json
  
  // AI metadata
  confidence      Int?
  tokensUsed      Int?
  processingTime  Int?
  modelUsed       String?
  costUsd         Decimal? @db.Decimal(10,6)
  fromCache       Boolean @default(false)
  
  // Error handling
  error           String?
  jobId           String?
  
  // Discovery data
  discoveries     Json?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([status])
  @@index([categoryId])
  @@index([createdAt])
  @@index([jobId])
  @@map("extraction_results")
}
